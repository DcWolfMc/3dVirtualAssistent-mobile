/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei/native";
import { GLTF } from "three-stdlib";
import { LinearSRGBColorSpace, SRGBColorSpace } from "three/src/constants";
type GLTFResult = GLTF & {
  nodes: {
    HG_Body: THREE.SkinnedMesh;
    HG_Eyes: THREE.SkinnedMesh;
    HG_Skinny_Jeans_Female001: THREE.SkinnedMesh;
    HG_TeethLower: THREE.SkinnedMesh;
    HG_TeethUpper: THREE.SkinnedMesh;
    HG_TSHIRT_Female001: THREE.SkinnedMesh;
    Hair: THREE.Mesh;
    spine: THREE.Bone;
  };
  materials: {};
};

type ActionName = "Key.004Action";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();

  const [
    bodyTexture,
    eyesTexture,
    teethTexture,
    bodySpecularTexture,
    bodyRoughnessTexture,
    bodyNormalTexture,
    teethNormalTexture,
    // teethSpecularTexture,
    hairTexture,
    tshirtDiffuseTexture,
    tshirtNormalTexture,
    tshirtRoughnessTexture,
    hairAlphaTexture,
    hairNormalTexture,
    hairRoughnessTexture,
  ] = useTexture([
    require("../assets/images/body.webp"),
    require("../assets/images/eyes.webp"),
    require("../assets/images/teeth_diffuse.webp"),
    require("../assets/images/body_specular.webp"),
    require("../assets/images/body_roughness.webp"),
    require("../assets/images/body_normal.webp"),
    require("../assets/images/teeth_normal.webp"),
    // require("../assets/images/teeth_specular.webp"),
    require("../assets/images/h_color.webp"),
    require("../assets/images/tshirt_diffuse.webp"),
    require("../assets/images/tshirt_normal.webp"),
    require("../assets/images/tshirt_roughness.webp"),
    require("../assets/images/h_alpha.webp"),
    require("../assets/images/h_normal.webp"),
    require("../assets/images/h_roughness.webp"),
  ]);
  [
    bodyTexture,
    eyesTexture,
    teethTexture,
    teethNormalTexture,
    bodySpecularTexture,
    bodyRoughnessTexture,
    bodyNormalTexture,
    tshirtDiffuseTexture,
    tshirtNormalTexture,
    tshirtRoughnessTexture,
    hairAlphaTexture,
    hairNormalTexture,
    hairRoughnessTexture,
  ].forEach((t) => {
    t.encoding = SRGBColorSpace;
    t.flipY = false;
  });

  bodyNormalTexture.encoding = LinearSRGBColorSpace;
  tshirtNormalTexture.encoding = LinearSRGBColorSpace;
  teethNormalTexture.encoding = LinearSRGBColorSpace;
  hairNormalTexture.encoding = LinearSRGBColorSpace;
  const { nodes, materials, animations, scene } = useGLTF(
    require("/model2.glb")
  ) as GLTFResult;
  let morphTargetDictionaryBody = null;
  let morphTargetDictionaryLowerTeeth = null;

  scene.traverse((node) => {
    if (
      node.type === "Mesh" ||
      node.type === "LineSegments" ||
      node.type === "SkinnedMesh"
    ) {
      let skinnedNode = node as THREE.SkinnedMesh;
      skinnedNode.castShadow = true;
      skinnedNode.receiveShadow = true;
      skinnedNode.frustumCulled = false;

      if (skinnedNode.name.includes("Body")) {
        skinnedNode.castShadow = true;
        skinnedNode.receiveShadow = true;

        skinnedNode.material = new THREE.MeshPhysicalMaterial();
        skinnedNode.material.map = bodyTexture;
        // skinnedNode.material.shininess = 60;
        skinnedNode.material.roughness = 1.7;

        // skinnedNode.material.specularMap = bodySpecularTexture;
        skinnedNode.material.roughnessMap = bodyRoughnessTexture;
        skinnedNode.material.normalMap = bodyNormalTexture;
        skinnedNode.material.normalScale = new THREE.Vector2(0.6, 0.6);

        morphTargetDictionaryBody = skinnedNode.morphTargetDictionary;

        skinnedNode.material.envMapIntensity = 0.8;
        // skinnedNode.material.visible = false;
      }

      if (skinnedNode.name.includes("Eyes")) {
        skinnedNode.material = new THREE.MeshStandardMaterial();
        skinnedNode.material.map = eyesTexture;
        // skinnedNode.material.shininess = 100;
        skinnedNode.material.roughness = 0.1;
        skinnedNode.material.envMapIntensity = 0.5;
      }

      if (skinnedNode.name.includes("Brows")) {
        skinnedNode.material = new THREE.LineBasicMaterial({ color: 0x000000 });
        skinnedNode.material.linewidth = 1;
        skinnedNode.material.opacity = 0.5;
        skinnedNode.material.transparent = true;
        skinnedNode.visible = false;
      }

      if (skinnedNode.name.includes("Teeth")) {
        skinnedNode.receiveShadow = true;
        skinnedNode.castShadow = true;
        skinnedNode.material = new THREE.MeshStandardMaterial();
        skinnedNode.material.roughness = 0.1;
        skinnedNode.material.map = teethTexture;
        skinnedNode.material.normalMap = teethNormalTexture;

        skinnedNode.material.envMapIntensity = 0.7;
      }

      if (skinnedNode.name.includes("Hair")) {
        skinnedNode.material = new THREE.MeshStandardMaterial();
        skinnedNode.material.map = hairTexture;
        skinnedNode.material.alphaMap = hairAlphaTexture;
        skinnedNode.material.normalMap = hairNormalTexture;
        skinnedNode.material.roughnessMap = hairRoughnessTexture;

        skinnedNode.material.transparent = true;
        skinnedNode.material.depthWrite = false;
        skinnedNode.material.side = 2;
        skinnedNode.material.color.setHex(0x000000);

        skinnedNode.material.envMapIntensity = 0.3;
      }

      if (skinnedNode.name.includes("TSHIRT")) {
        skinnedNode.material = new THREE.MeshStandardMaterial();

        skinnedNode.material.map = tshirtDiffuseTexture;
        skinnedNode.material.roughnessMap = tshirtRoughnessTexture;
        skinnedNode.material.normalMap = tshirtNormalTexture;
        skinnedNode.material.color.setHex(0xffffff);

        skinnedNode.material.envMapIntensity = 0.5;
      }

      if (skinnedNode.name.includes("TeethLower")) {
        morphTargetDictionaryLowerTeeth = skinnedNode.morphTargetDictionary;
      }
    }
  });

  const { actions } = useAnimations<GLTFActions>(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="HG_Lula" position={[0, 0.001, 0]}>
          <skinnedMesh
            name="HG_Body"
            geometry={nodes.HG_Body.geometry}
            material={nodes.HG_Body.material}
            skeleton={nodes.HG_Body.skeleton}
            morphTargetDictionary={nodes.HG_Body.morphTargetDictionary}
            morphTargetInfluences={nodes.HG_Body.morphTargetInfluences}
          />
          <skinnedMesh
            name="HG_Eyes"
            geometry={nodes.HG_Eyes.geometry}
            material={nodes.HG_Eyes.material}
            skeleton={nodes.HG_Eyes.skeleton}
          />
          <skinnedMesh
            name="HG_Skinny_Jeans_Female001"
            geometry={nodes.HG_Skinny_Jeans_Female001.geometry}
            material={nodes.HG_Skinny_Jeans_Female001.material}
            skeleton={nodes.HG_Skinny_Jeans_Female001.skeleton}
            morphTargetDictionary={
              nodes.HG_Skinny_Jeans_Female001.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.HG_Skinny_Jeans_Female001.morphTargetInfluences
            }
          />
          <skinnedMesh
            name="HG_TeethLower"
            geometry={nodes.HG_TeethLower.geometry}
            material={nodes.HG_TeethLower.material}
            skeleton={nodes.HG_TeethLower.skeleton}
            morphTargetDictionary={nodes.HG_TeethLower.morphTargetDictionary}
            morphTargetInfluences={nodes.HG_TeethLower.morphTargetInfluences}
          />
          <skinnedMesh
            name="HG_TeethUpper"
            geometry={nodes.HG_TeethUpper.geometry}
            material={nodes.HG_TeethUpper.material}
            skeleton={nodes.HG_TeethUpper.skeleton}
          />
          <skinnedMesh
            name="HG_TSHIRT_Female001"
            geometry={nodes.HG_TSHIRT_Female001.geometry}
            material={nodes.HG_TSHIRT_Female001.material}
            skeleton={nodes.HG_TSHIRT_Female001.skeleton}
            morphTargetDictionary={
              nodes.HG_TSHIRT_Female001.morphTargetDictionary
            }
            morphTargetInfluences={
              nodes.HG_TSHIRT_Female001.morphTargetInfluences
            }
          />
          <primitive object={nodes.spine} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(require("../assets/models/model2.glb"));
